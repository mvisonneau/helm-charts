---
# replicas -- amount of desired pod(s) replica(s)
replicas: 1

# prefer using .Release.name to assign namespace!  

image:
  # image.repository -- image repository
  repository: mvisonneau/gitlab-ci-pipelines-exporter

  # image.tag -- image tag
  # tag: <default to chart version>

  # image.pullPolicy -- image pullPolicy
  pullPolicy: IfNotPresent

  # image.pullSecrets -- Optional array of imagePullSecrets containing private registry credentials
  # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  pullSecrets: []
  # - name: secretName

  # image.pullCredentials -- Automatically create a secret with the credentials and use it
  # Cannot be used in conjunction of image.pullSecrets
  pullCredentials: {}
    # registry: quay.io
    # username: someone
    # password: sillyness

# labels -- additional labels for the deployment resource
labels: {}

# annotations -- additional annotations for the deployment resource
annotations: {}

# podLabels -- additional labels for the pods
podLabels: {}

# podAnnotations -- additional annotations for the pods
podAnnotations: {}

service:
  # type -- service type
  type: ClusterIP

  # port -- service port
  port: 80

  # labels -- additional labels for the service
  labels: {}

  # annotations -- additional annotations for the service
  annotations: {}

# resources -- resources to allocate to the pods
resources: {}
#  limits:
#    cpu: 50m
#    memory: 64Mi
#  requests:
#    cpu: 50m
#    memory: 64Mi

strategy:
  # strategy -- deployment strategy type
  type: RollingUpdate

## Liveness and Readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health/live
    port: 8080

readinessProbe:
  httpGet:
    path: /health/ready
    port: 8080
  initialDelaySeconds: 5
  timeoutSeconds: 5
  failureThreshold: 3
  periodSeconds: 30

# nodeSelector -- node selector for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# tolerations -- tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# affinity -- affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

# securityContext -- security context to apply to the pods
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context
securityContext:
  # runAsUser: 65534  # run as nobody user

# command -- command for the exporter binary
command:
  - gitlab-ci-pipelines-exporter
  - run

# args -- arguments for the exporter binary
args:
  - --config
  - /etc/config.yml

# envVariables -- environment variables for the container
envVariables:
  - name: GCPE_INTERNAL_MONITORING_LISTENER_ADDRESS
    value: tcp://127.0.0.1:8082

# config -- configuration of the exporter
config: {}
  # # Complete configuration syntax reference available here:
  # # https://github.com/mvisonneau/gitlab-ci-pipelines-exporter/blob/master/docs/configuration_syntax.md
  # gitlab:
  #   url: https://gitlab.example.com
  #   token: <your_token>
  # projects:
  #   - name: foo/project
  #   - name: bar/project
  # wildcards:
  #   - owner:
  #       name: foo
  #       kind: group

# -- name of a `Secret` containing the GitLab token in the `gitlabToken` field (required unless `config.gitlab.token` is specified)
gitlabSecret: ""

# -- name of a `Secret` containing the webhook token in the `webhookToken` field (required unless `config.server.webhook.secret_token` is specified)
webhookSecret: ""

hostAliases: []
  # - ip: 192.168.0.1
  #   hostnames:
  #     - gitlab.server.com

## Manage a ServiceMonitor resource to automatically configure the endpoint
## through the Prometheus operator: https://github.com/coreos/prometheus-operator
serviceMonitor:
  # serviceMonitor.enabled -- deploy a serviceMonitor resource
  enabled: false

  # serviceMonitor.scrapeInterval -- prometheus probes interval
  scrapeInterval: 10s

  # serviceMonitor.labels -- additional labels for the service monitor
  labels: {}

  # serviceMonitor.annotations -- additional annotations for the service monitor
  annotations: {}

## Spin up a redis pod using the bitnami chart
## https://github.com/bitnami/charts/blob/master/bitnami/redis
redis:
  # redis.enabled -- deploy a redis statefulset
  enabled: true

  # redis.architecture -- run in standalone or clustermode
  architecture: standalone

  auth:
    # redis.auth.enabled -- enable authentication
    enabled: false

  metrics:
    # redis.metrics.enabled -- enable /metrics endpoint of the redis pods
    enabled: false

    serviceMonitor:
      # redis.metrics.serviceMonitor.enabled -- deploy a serviceMonitor resource for the redis pods
      enabled: false

  master:
    persistence:
      # redis.master.persistence.enabled -- persist data
      enabled: false

## Ingress configuration (useful when looking to expose /webhook endpoint externally)
ingress:
  # ingress.enabled -- deploy a ingress to access the exporter pod(s) /webhook endpoint
  enabled: false

  # ingress.annotations -- additional annotations for the ingress resource
  annotations:
    # kubernetes.io/ingress.class: nginx
    # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

  # ingress.path -- path on the exporter to point the root of the ingress
  path: /webhook

  # ingress.pathType -- pathType for the ingress
  pathType: Prefix

  service:
    port:
    # ingress.service.port.name -- service port for the ingress
      name: http

  # ingress.hosts -- ingress hosts
  hosts:
    - gcpe.example.com

  # ingress.tls -- ingress tls hosts config
  tls:
    - hosts:
        - gcpe.example.com

# rbac -- If your kubernetes cluster defined the pod security policy, then you need to enable this part, and define clusterRole based on your situation.
rbac:
  enabled: false
  clusterRole: ""
  # serviceAccount -- default name of serviceAccount is "default" if you don't define the name by yourself
  serviceAccount: 
    name: ""
